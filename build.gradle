plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

jacoco {
	// JaCoCo 버전
	toolVersion = '0.8.8'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.projectlombok:lombok:1.18.22'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.thymeleaf:thymeleaf-lib:3.1.1.RELEASE'
	implementation 'org.webjars:jquery:3.4.1'
	implementation 'org.webjars:bootstrap:4.3.1'
	implementation 'org.webjars:webjars-locator-core'

	//lombok
	implementation 'org.projectlombok:lombok:1.18.26'
	annotationProcessor 'org.projectlombok:lombok:'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.4'
	implementation 'mysql:mysql-connector-java:8.0.15'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server:3.0.4'
	implementation 'org.springframework.security:spring-security-oauth2-jose:6.0.2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	runtimeOnly 'com.h2database:h2'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'

	// Java bean validation provider
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// java date and time classes to JSON
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.2'

}

tasks.named('test') {
	useJUnitPlatform()
}

jacocoTestReport {
	reports {
		// 원하는 리포트를 켜고 끌 수 있습니다.
		html.enabled true
		xml.enabled false
		csv.enabled false

//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
  		html.destination file("$buildDir/jacoco/jacocoHtml")
	    xml.destination file("$buildDir/jacoco.xml")
	}
}


jacocoTestCoverageVerification {
	violationRules {
		rule {
			// 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 합니다.
			// 위의 리포트에서 'Total'로 표시된 부분입니다.
			limit {
				// 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
				// 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
				minimum = 0.30
			}
		}

		// 여러 룰을 생성할 수 있습니다.
		rule {
			// 룰을 간단히 켜고 끌 수 있습니다.
			enabled = true

			// 룰을 체크할 단위는 클래스 단위
			element = 'CLASS'

			// 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
			limit {
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}

			// 라인 커버리지를 최소한 80% 만족시켜야 합니다.
			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.10
			}

		}
	}
}